package uoa.pope.example.queries;

import org.apache.jena.ontology.OntModel;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.ResultSet;
import org.apache.jena.query.ResultSetFormatter;

import uoa.pope.example.main.Namespaces;
import uoa.pope.example.main.Utils;

public class RunQueries {
    
	private OntModel model; 
	
	public RunQueries (OntModel model) {
		this.model =model; 
	}
	
	
	//check annotations for data collection 
	public void runQuerySet1  () {
//		String queryString = Namespaces.getAsPrefixes()+ " Select * Where {?p ?s ?o.}";
		String queryString;
		
	   //inspect searches
				
				System.out.println("A number of data items generated by individual data collections via an API");
				
				queryString = Namespaces.getAsPrefixes()+ " Select ?activity  ?activityType (count(?post) as ?postCount) Where {?entity prov:wasGeneratedBy ?activity. ?activity a ?activityType. ?entity a prov:Collection.?entity prov:hadMember ?post.  FILTER (?activityType =  pope:CollectionViaApiActivity )  } GROUP BY ?activity ?activityType";
				Utils.runQueryWithFormatter(queryString, model);
				
                System.out.println("A number of data items generated by individual data collections by group tag ");
				
				queryString = Namespaces.getAsPrefixes()+ " Select ?groupTagValue (count(?post) as ?postCount) Where { ?activity a pope:CollectionViaApiActivity; prov:used ?groupTag. ?groupTag a pope:GroupTagEntity; prov:value ?groupTagValue. ?entity a prov:Collection; prov:hadMember ?post; prov:wasGeneratedBy ?activity.    } GROUP BY ?groupTagValue ";
				Utils.runQueryWithFormatter(queryString, model);
				
				
                System.out.println("Example Tweet body described using ex:TwetBody concept (Limit 10)");
				
				queryString = Namespaces.getAsPrefixes()+ " Select ?activity ?text ?relationshipToDataItem ?dataItem  Where {?entity prov:wasGeneratedBy ?activity. ?activity a  pope:CollectionViaApiActivity. ?entity a prov:Collection.?entity prov:hadMember ?dataItem. ?relationshipToDataItem rdfs:subPropertyOf skos:related. ?body ?relationshipToDataItem ?dataItem. ?body rdf:value  ?text. Filter (?relationshipToDataItem!= skos:related)    }  LIMIT 10 ";
				Utils.runQueryWithFormatter(queryString, model);
				
                System.out.println("A list of parameters used in data collection activities ");
				
				queryString = Namespaces.getAsPrefixes()+ " Select DISTINCT ?activity ?parameter ?role ?parameterValue  Where {?activity a pope:CollectionViaApiActivity; prov:used ?parameter;  prov:qualifiedUsage ?usage. ?usage prov:hadRole ?role; prov:entity ?parameter. ?role a pope:Parameter. ?parameter prov:value ?parameterValue } ORDER BY ?activity ";
				Utils.runQueryWithFormatter(queryString, model);
				
				System.out.println("TEST ");
                //this is an expensive query
                queryString = Namespaces.getAsPrefixes()+ " Select * Where {?dataItem a pope:TwitterDataSetItem. } Limit 10 ";
                Utils.runQueryWithFormatter(queryString, model);
				
                System.out.println("Inspect relationship of keywords and data items generated by search activities ");
                //this is an expensive query
                queryString = Namespaces.getAsPrefixes()+ " Select Distinct ?parameter ?relationshipToDataItemCharacteristic ?characteristicType ?relationshipToDataItem Where {?activity a pope:CollectionViaApiActivity; prov:used ?parameter. ?parameter a pope:KeywordEntity; ?relationshipToDataItemCharacteristic ?characteristic.  ?relationshipToDataItemCharacteristic rdfs:subPropertyOf skos:related. ?characteristic a ?characteristicType. ?characteristic ?relationshipToDataItem ?dataItem. ?dataItem a pope:TwitterDataSetItem. ?relationshipToDataItem rdfs:subPropertyOf skos:related.  Filter (?relationshipToDataItem!= skos:related && ?relationshipToDataItemCharacteristic!= skos:related && regex(STR(URI(?characteristicType)), \"http://foobs.org#Post\" )) }  ";
                Utils.runQueryWithFormatter(queryString, model);
                
                
                
                System.out.println("Check relationship of specific keywords and Tweet bodies included in data items within a collection generated by search activity(Limit 10)");
				
				//queryString = Namespaces.getAsPrefixes()+ " Select ?parameter ?paramValue ?relationshipToDataItemCharacteristic ?characteristicValue ?characteristicType  Where {?activity a pope:CollectionViaApiActivity; prov:used ?parameter;  prov:qualifiedUsage ?usage. ?usage prov:hadRole pope:Keyword; prov:entity ?parameter. ?parameter ?relationshipToDataItemCharacteristic ?characteristic; prov:value ?paramValue.  ?relationshipToDataItemCharacteristic rdfs:subPropertyOf skos:related. ?characteristic a ?characteristicType; rdf:value ?characteristicValue.  Filter (?relationshipToDataItemCharacteristic!= skos:related && regex(STR(URI(?characteristicType)), \"http://foobs.org#Post\" )) } Limit 10 ";
                queryString = Namespaces.getAsPrefixes()+ " Select ?parameter ?paramValue ?relationshipToDataItemCharacteristic ?characteristicValue ?characteristicType  Where {?activity a pope:CollectionViaApiActivity; prov:used ?parameter. ?parameter a pope:KeywordEntity; ?relationshipToDataItemCharacteristic ?characteristic; prov:value ?paramValue.  ?relationshipToDataItemCharacteristic rdfs:subPropertyOf skos:related. ?characteristic a ?characteristicType; rdf:value ?characteristicValue.  Filter (?relationshipToDataItemCharacteristic!= skos:related && regex(STR(URI(?characteristicType)), \"http://foobs.org#Post\" )) } Limit 10 ";
				
                Utils.runQueryWithFormatter(queryString, model);
				
		
	}
	 
}
