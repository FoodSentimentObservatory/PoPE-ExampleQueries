package uoa.pope.example.queries;

import java.util.Iterator;

import org.apache.jena.ontology.OntModel;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.ResultSet;
import org.apache.jena.query.ResultSetFormatter;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.rdf.model.Statement;
import org.apache.jena.update.UpdateAction;
import org.apache.jena.vocabulary.RDF;

import uoa.pope.example.main.Namespaces;
import uoa.pope.example.main.Utils;
import uoa.pope.example.main.Utils.Node;

public class RunQueries {
    
	private OntModel model; 
	
	public RunQueries (OntModel model) {
		this.model =model; 
	}

	
	
	public void runQuerySetDataItems  () {
		System.out.println("Q1: What social media posts were collected and what where their associated attributes?".toUpperCase());
        System.out.println("--------------------------------------------------------------");
        System.out.println("Queries in this section evaluate the capability of the PoPE vocabulary to describe attributes of individual dataset items and dataset collections.\n These attributes can be arbitrary concepts such as structure of the dataset and data items (e.g. contains a tweet body, time of creation, etc.)\n or any other related concepts (e.g. size of a dataset, applicable license, etc.).");
        System.out.println("--------------------------------------------------------------");
	    
        System.out.println("\nQ1.1 What were the attributes of the collected data items? ".toUpperCase());
		System.out.println("-------------------------------------------------------------\n");
        
        String queryString = Namespaces.getAsPrefixes()+ " Select ?collection ?attributeType ?attributeValue ?attributeRelationshipToDatItem ?dataItem Where {?collection prov:wasGeneratedBy ?activity;a prov:Collection; prov:hadMember ?dataItem. ?activity a ?activityPlan.   ?attribute ?attributeRelationshipToDatItem ?dataItem; a ?attributeType; rdf:value ?attributeValue. ?attributeRelationshipToDatItem rdfs:subPropertyOf skos:related.  FILTER (?activityPlan =  pope:CollectionViaApiActivity && ?attributeRelationshipToDatItem!= skos:related )  }LIMIT 10  ";
		
        System.out.println("An example list of concepts describing the attributes of data items contained in a dataset collection generated by a collection activity (Limit 10). \n");
        
        
        Utils.runQueryWithFormatter(queryString, model);
		
		/*
		System.out.println("-------------------------------------------------------------\n");
		System.out.println("Example values of data item characteristics (Limit 10)");
			
		queryString = Namespaces.getAsPrefixes()+ " Select ?activity ?text ?relationshipToDataItem ?dataItem  Where {?entity prov:wasGeneratedBy ?activity. ?activity a  pope:CollectionViaApiActivity. ?entity a prov:Collection.?entity prov:hadMember ?dataItem. ?relationshipToDataItem rdfs:subPropertyOf skos:related. ?body ?relationshipToDataItem ?dataItem. ?body rdf:value  ?text. Filter (?relationshipToDataItem!= skos:related)    }  LIMIT 10 ";
		Utils.runQueryWithFormatter(queryString, model);
        */
        
        System.out.println("\nQ1.2 During what time period were the collected posts created?".toUpperCase());
		System.out.println("-------------------------------------------------------------\n");
        System.out.println("A list of data sets generated by data collection activities and maximum and minimumm timestamps associated with data items contained in such datasets. \n");
	
        queryString = Namespaces.getAsPrefixes()+ " Select ?collection (min(?timestamp) as ?oldest) (max(?timestamp) as ?newest)  Where {?collection prov:wasGeneratedBy ?activity. ?activity a ?activityType. ?collection a prov:Collection; prov:hadMember ?dataItem.   ?timestampObject pope:includedIn ?dataItem; a examplePostOntology:TweetTimeOfCreation; rdf:value ?timestamp. FILTER (?activityType =  pope:CollectionViaApiActivity) } GROUP BY ?collection  ";
		Utils.runQueryWithFormatter(queryString, model);
	
		System.out.println("\nQ1.3 What was the relationship of generated data items and search keywords?".toUpperCase());
		System.out.println("-------------------------------------------------------------\n");
        System.out.println("An audit of relationship between search keywords and data items contained in a dataset collections generated by search activities grouped by search tags. \n ");
       
        queryString = Namespaces.getAsPrefixes()+ "Select Distinct ?searchGroupTag ?parameter ?relationshipToDataItemAttribute ?attributeType ?relationshipToDataItem Where {?activity a pope:CollectionViaApiActivity; prov:used ?parameter; prov:used ?activityGroupTag. ?activityGroupTag a pope:GroupTagEntity; prov:value ?searchGroupTag.?coll prov:wasGeneratedBy ?activity; prov:hadMember ?dataItem.  ?dataItem a pope:TwitterDataSetItem. ?relationshipToDataItem rdfs:subPropertyOf skos:related. ?attribute ?relationshipToDataItem ?dataItem.  ?relationshipToDataItemAttribute rdfs:subPropertyOf skos:related. ?attribute a ?attributeType. ?parameter a pope:KeywordEntity; ?relationshipToDataItemAttribute ?attribute.  Filter (?relationshipToDataItem!= skos:related && ?relationshipToDataItemAttribute!= skos:related && regex(STR(URI(?attributeType)), \"http://foobs.org/Post#\" )) }  ";
        
        Utils.runQueryWithFormatter(queryString, model);
        
        System.out.println("\nAn audit of relationship between specific keywords and Tweet bodies included in data items contained in a dataset collection generated by search activity (Limit 10)");
		
        queryString = Namespaces.getAsPrefixes()+ " Select ?parameter ?paramValue ?relationshipToDataItemAttribute ?attributeValue ?attributeType  Where {?activity a pope:CollectionViaApiActivity; prov:used ?parameter. ?parameter a pope:KeywordEntity; ?relationshipToDataItemAttribute ?attribute; prov:value ?paramValue.  ?relationshipToDataItemAttribute rdfs:subPropertyOf skos:related. ?attribute a ?attributeType; rdf:value ?attributeValue.  Filter (?relationshipToDataItemAttribute!= skos:related && regex(STR(URI(?attributeType)), \"http://foobs.org/Post#\" )) } Limit 10 ";
		
        Utils.runQueryWithFormatter(queryString, model);
        
        System.out.println("\nQ1.4 What geographical area were the posts collected from?".toUpperCase());
        System.out.println("-------------------------------------------------------------\n");
        System.out.println("An audit of relationship between location parameter and data items contained in a dataset collections generated by search activities grouped by search tags. \n ");      
        
        queryString = Namespaces.getAsPrefixes()+ " Select Distinct ?searchGroupTag ?parameter  ?parameterValue ?relationshipToDataItemAttribute ?attributeType ?relationshipToDataItem Where {?activity a pope:CollectionViaApiActivity; prov:used ?parameter; prov:used ?activityGroupTag. ?activityGroupTag a pope:GroupTagEntity; prov:value ?searchGroupTag. ?coll prov:wasGeneratedBy ?activity; prov:hadMember ?dataItem. ?parameter a pope:LocationEntity; prov:value ?parameterValue; ?relationshipToDataItemAttribute ?attribute.  ?relationshipToDataItemAttribute rdfs:subPropertyOf skos:related. ?attribute a ?attributeType; ?relationshipToDataItem ?dataItem. ?dataItem a pope:TwitterDataSetItem. ?relationshipToDataItem rdfs:subPropertyOf skos:related.  Filter (?relationshipToDataItem!= skos:related && ?relationshipToDataItemAttribute!= skos:related && regex(STR(URI(?attributeType)), \"http://foobs.org\" ) ) }  ";
        Utils.runQueryWithFormatter(queryString, model);
        
       
        System.out.println("An example list of locations associated with a data item (LIMIT 10). \n ");

        queryString = Namespaces.getAsPrefixes()+ " Select ?collection ?dataItem ?locationValue  Where {?collection prov:wasGeneratedBy ?activity; a prov:Collection; prov:hadMember ?dataItem. ?activity a ?activityType.   ?locationObject pope:includedIn ?dataItem; a examplePostOntology:TweetLocation; rdf:value ?locationValue. FILTER (?activityType =  pope:CollectionViaApiActivity) } Limit 10  ";
		Utils.runQueryWithFormatter(queryString, model);	
	}
	
	
	//check annotations for data collection 
	public void runQuerySet1  () {
//		String queryString = Namespaces.getAsPrefixes()+ " Select * Where {?p ?s ?o.}";
		String queryString;
		
	   //inspect searches
		         System.out.println("\n-------------------------------");
		        System.out.println("Q2: How was the data collected, processed and analysed?".toUpperCase());
		        System.out.println("--------------------------------------------------------------");
		        System.out.println("This section evaluates the ability of PoPE vocabulary to describe search restrictions\n under which datasets were collected and information about steps such as data preprocessing (e.g. data filtering, stop word removal, etc.)\n and analysis (e.g. sentiment, frequency of keyword mentions, etc.) that were associated with the creation of policy evidence.");
		        System.out.println("--------------------------------------------------------------");
		        
		        System.out.println("\nQ2.1 What tools and services were used to collect the data? ".toUpperCase());
				System.out.println("-------------------------------------------------------------\n");
		        System.out.println("A list of software agents associted with data collection activities. \n");
				
				queryString = Namespaces.getAsPrefixes()+ " Select ?activity ?softwareAgent ?agentType Where { ?activity a pope:CollectionViaApiActivity; prov:wasAssociatedWith ?softwareAgent. ?softwareAgent a prov:SoftwareAgent; a ?agentType. FILTER (regex(STR(URI(?agentType)), \"http://foobs.org\" ))  } ";
				Utils.runQueryWithFormatter(queryString, model);
				
                 System.out.println("\nAn audit of API endpoints associted with data collection activities. \n");
				
				queryString = Namespaces.getAsPrefixes()+ " Select ?activity  ?apiEndpoint ?endpointAttributedTo  Where {?activity a pope:CollectionViaApiActivity;prov:used ?parameter. ?parameter a pope:ApiEndpointEntity;prov:value ?apiEndpoint; prov:specializationOf ?endpoint. ?endpoint prov:wasAttributedTo ?endpointAttributedTo. }";
				Utils.runQueryWithFormatter(queryString, model);
				
				System.out.println("\nQ2.2 What is the license associated with the collected data?".toUpperCase());
				System.out.println("-------------------------------------------------------------\n");
				System.out.println("An example description of a policy modelled using the ODLR vocabulary and attached to a dataset collection generated by data collection activities. \n");
				queryString = Namespaces.getAsPrefixes()+ " Select ?collection ?policy  {?collection a prov:Collection; prov:wasGeneratedBy ?activity. ?activity a pope:CollectionViaApiActivity. ?policy a odrl:Policy; pope:appliesTo ?collection. }";
				Utils.runQueryWithFormatter(queryString, model);
		        
		        System.out.println("\nQ2.3 How many individual searches were performed?".toUpperCase());
				System.out.println("-------------------------------------------------------------\n");
		        System.out.println("A list of data collection activities, their start and end time, and number of data items generated in each dataset collection. \n");
				
				queryString = Namespaces.getAsPrefixes()+ " Select ?activity  ?startedAtTime ?endedAtTime ?activityType ?generatedCollection (count(?datsetItem) as ?dataItemsCount) Where {?generatedCollection prov:wasGeneratedBy ?activity. ?activity a ?activityType; prov:startedAtTime ?startedAtTime; prov:endedAtTime ?endedAtTime. ?generatedCollection a prov:Collection; prov:hadMember ?datsetItem.  FILTER (?activityType =  pope:CollectionViaApiActivity )  } GROUP BY ?activity ?activityType ?startedAtTime ?endedAtTime ?generatedCollection";
				Utils.runQueryWithFormatter(queryString, model);
				
				System.out.println("\nQ2.4 How did the searches relate to each other?".toUpperCase());
				System.out.println("-------------------------------------------------------------\n");
                System.out.println("A number of data items generated by search activities grouped by a group tag (searches with the same group tag denote repeating searches).\n");
				
				queryString = Namespaces.getAsPrefixes()+ " Select ?groupTagValue (count(?dataItem) as ?dataItemsCount) Where { ?activity a pope:CollectionViaApiActivity; prov:used ?groupTag. ?groupTag a pope:GroupTagEntity; prov:value ?groupTagValue. ?entity a prov:Collection; prov:hadMember ?dataItem; prov:wasGeneratedBy ?activity.    } GROUP BY ?groupTagValue ";
				Utils.runQueryWithFormatter(queryString, model);
               
				System.out.println("\nQ2.5 What were the search parameters for data collection activities and what were their associated constraints?".toUpperCase());
				System.out.println("-------------------------------------------------------------\n");
				System.out.println("A list of parameters used in data collection activities. ");
				
				queryString = Namespaces.getAsPrefixes()+ " Select DISTINCT ?activity ?parameter ?role ?parameterValue  Where {?activity a pope:CollectionViaApiActivity; prov:used ?parameter;  prov:qualifiedUsage ?usage. ?usage prov:hadRole ?role; prov:entity ?parameter. ?role a pope:Parameter. ?parameter prov:value ?parameterValue } ORDER BY ?activity ";
				Utils.runQueryWithFormatter(queryString, model);
				
				System.out.println("-------------------------------------------------------------\n");
				System.out.println("A description of constraints associated with search activities.");
                
				queryString = Namespaces.getAsPrefixes()+ " Select DISTINCT ?activity ?constraint ?rootNode ?constraintValue ?constraintType  Where {?activity a pope:CollectionViaApiActivity; prov:qualifiedUsage ?usage. ?usage prov:hadRole ?constraintType; prov:entity ?constraint. ?constraint prov:value ?constraintValue;pope:describedAs ?rootNode. ?constraintType a pope:Constraint.}  ";
				Utils.runQueryWithFormatter(queryString, model);
				
			
				
				queryString = Namespaces.getAsPrefixes()+ " Select DISTINCT  ?constraint ?rootNode    Where {?activity a pope:CollectionViaApiActivity; prov:qualifiedUsage ?usage. ?usage prov:hadRole ?constraintType; prov:entity ?constraint. ?constraint pope:describedAs ?rootNode. ?constraintType a pope:Constraint.}";
				
				
				System.out.println("Constraint trees modeeling the logical relationships between search paprameters. \n");
				System.out.println("-------------------------------------------------------------\n");
				Utils.printConstraintTree(queryString, model);
				
			
		        System.out.println("-------------------------------");    
		        System.out.println("\nQ2.6:What data collection, preprocessing and analysis steps were associated with data and in what order?".toUpperCase());
		        System.out.println("\nJOINED WITH\n");
		        System.out.println("Q3:What human actors were involved in producing evidence ?".toUpperCase());
		        System.out.println("-------------------------------");
		        System.out.println("Inspecting derivation history for results of word frequency count - i.e. collection " +Namespaces.EXAMPLE_PREFIX + "ResultCollection_wordCountResult");
		        
		        
		       
		        
		        queryString = Namespaces.getAsPrefixes()+ " Select Distinct ?activity ?activityPlan ?humanActor   Where {  ?association  a prov:Association;  prov:hadPlan ?activityPlan; prov:agent ?humanActor. ?humanActor a prov:Person. ?activity prov:qualifiedAssociation ?association. {<"+Namespaces.EXAMPLE_PREFIX + "ResultCollection_wordCountResult"+"> prov:wasDerivedFrom+ ?coll. ?coll prov:wasGeneratedBy ?activity.} UNION  {<"+Namespaces.EXAMPLE_PREFIX + "ResultCollection_wordCountResult"+"> prov:wasGeneratedBy ?activity. } }";
		        Utils.runQueryWithFormatter(queryString, model);
		        
		        
		        
		        
		        System.out.println("\nQ2.7: What parameters and constraints were associated with preprocesing activities?".toUpperCase());
		        
		        
		        System.out.println("\n-------------------------------\n");
		        System.out.println("Find preprocesing activities for the collection "+ Namespaces.EXAMPLE_PREFIX + "ResultCollection_wordCountResult");
		        System.out.println("\n-------------------------------\n");
		        
		        queryString = Namespaces.getAsPrefixes()+ " Select Distinct ?activity ?activityPlan ?humanActor  Where { ?activityPlan a pope:DataPreprocessing. ?association  a prov:Association;  prov:hadPlan ?activityPlan; prov:agent ?humanActor. ?humanActor a prov:Person. ?activity prov:qualifiedAssociation ?association. <"+Namespaces.EXAMPLE_PREFIX + "ResultCollection_wordCountResult"+"> prov:wasDerivedFrom+ ?coll. ?coll prov:wasGeneratedBy ?activity. }";
		        Utils.runQueryWithFormatter(queryString, model);
		        
		        
		        
		        System.out.println("\nAn audit of relationship between activity parameters and attributes of data items generated by data filtering activities. \n ");      
		        
                 
		        queryString = Namespaces.getAsPrefixes()+ " Select Distinct ?activity ?parameter ?role  ?parameterValue ?relationshipToDataItemAttribute ?attributeType ?relationshipToDataItem Where {?activity a pope:DataFilteringActivity; prov:used ?parameter.  ?usage prov:entity ?parameter; prov:hadRole ?role. ?parameter prov:value ?parameterValue; ?relationshipToDataItemAttribute ?attribute. ?relationshipToDataItemAttribute rdfs:subPropertyOf skos:related. ?attribute a ?attributeType; ?relationshipToDataItem ?dataItem. ?coll prov:wasGeneratedBy ?activity; prov:hadMember ?dataItem. ?dataItem a pope:TwitterDataSetItem. ?relationshipToDataItem rdfs:subPropertyOf skos:related.  Filter (?relationshipToDataItem!= skos:related && ?relationshipToDataItemAttribute!= skos:related && regex(STR(URI(?attributeType)), \"http://foobs.org\" ) )  }  ";
		        Utils.runQueryWithFormatter(queryString, model);
		      
				
		        System.out.println("-------------------------------------------------------------\n");
				System.out.println("A description of constraints associated with data filtering activity");
                
				queryString = Namespaces.getAsPrefixes()+ " Select DISTINCT ?activity ?constraint ?constraintValue ?constraintType  Where {?activity a pope:DataFilteringActivity; prov:qualifiedUsage ?usage. ?usage prov:hadRole ?constraintType; prov:entity ?constraint. ?constraint prov:value ?constraintValue;pope:describedAs ?rootNode. ?constraintType a pope:Constraint.}  ";
				Utils.runQueryWithFormatter(queryString, model);
		        
		        
		        System.out.println("\n-------------------------------------------------------------\n");
				System.out.println("Constraint trees: modeeling the logical relationships between search paprameters. \n");
				
				queryString = Namespaces.getAsPrefixes()+ " Select DISTINCT  ?constraint ?rootNode    Where {?activity a pope:DataFilteringActivity; prov:qualifiedUsage ?usage. ?usage prov:hadRole ?constraintType; prov:entity ?constraint. ?constraint pope:describedAs ?rootNode. ?constraintType a pope:Constraint.}  ";
				
				Utils.printConstraintTree(queryString, model);
				
				
               System.out.println("\nQ2.8: What parameters and constraints were associated with data analysis activities?".toUpperCase());
		        
		        
		        System.out.println("\n-------------------------------\n");
		        System.out.println("Find data analysis activities for the collection "+ Namespaces.EXAMPLE_PREFIX + "ResultCollection_wordCountResult");
		        System.out.println("\n-------------------------------\n");
		        
		        queryString = Namespaces.getAsPrefixes()+ " Select Distinct ?activity ?activityPlan  ?humanActor Where { ?activityPlan a pope:DataAnalysis. ?association  a prov:Association;  prov:hadPlan ?activityPlan; prov:agent ?humanActor. ?humanActor a prov:Person. ?activity prov:qualifiedAssociation ?association. <"+Namespaces.EXAMPLE_PREFIX + "ResultCollection_wordCountResult"+"> prov:wasGeneratedBy ?activity. }";
		        Utils.runQueryWithFormatter(queryString, model);
		        
		       
		        System.out.println("\nAn audit of relationship between activity parameters and result data collection generated by word frequency count activity. \n ");      
		        
                 
		        queryString = Namespaces.getAsPrefixes()+ " Select Distinct ?activity ?parameter ?role  ?parameterValue ?relationshipToResultCollectionAttribute ?attributeType ?relationshipToResultCollection  ?resultCollection Where {?activity a pope:WordFrequencyCountActivity; prov:used ?parameter; prov:qualifiedUsage ?usage.  ?usage prov:entity ?parameter; prov:hadRole ?role.  ?parameter prov:value ?parameterValue; ?relationshipToResultCollectionAttribute ?attribute. ?relationshipToResultCollectionAttribute rdfs:subPropertyOf skos:related. ?resultCollection prov:wasGeneratedBy ?activity;a pope:WordFrequencyDataSetEntity.  ?relationshipToResultCollection rdfs:subPropertyOf skos:related.  ?attribute a ?attributeType; ?relationshipToResultCollection ?resultCollection.  Filter (?relationshipToResultCollection!= skos:related && ?relationshipToResultCollectionAttribute!= skos:related && regex(STR(URI(?attributeType)), \"http://foobs.org\" ) )  }  ";
			     
		        
		        Utils.runQueryWithFormatter(queryString, model);
		        
		        ;
				System.out.println("\nA description of constraints associated with the word frequency count activity");
                
				queryString = Namespaces.getAsPrefixes()+ " Select DISTINCT ?activity ?constraint ?constraintValue ?constraintType  Where {?activity a pope:WordFrequencyCountActivity; prov:qualifiedUsage ?usage. ?usage prov:hadRole ?constraintType; prov:entity ?constraint. ?constraint prov:value ?constraintValue;pope:describedAs ?rootNode. ?constraintType a pope:Constraint.}  ";
				Utils.runQueryWithFormatter(queryString, model);
				
				
				
				System.out.println("\nConstraint tree modeeling the logical relationships between search paprameters. \n");
				
				queryString = Namespaces.getAsPrefixes()+ " Select DISTINCT  ?constraint ?rootNode    Where {?activity a pope:WordFrequencyCountActivity; prov:qualifiedUsage ?usage. ?usage prov:hadRole ?constraintType; prov:entity ?constraint. ?constraint pope:describedAs ?rootNode. ?constraintType a pope:Constraint.}  ";
				
				Utils.printConstraintTree(queryString, model);

		        
	}
	 
}
